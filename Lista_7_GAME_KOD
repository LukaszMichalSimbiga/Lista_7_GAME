import tkinter as ti
from pygame.locals import *
import os
import random


main_menu = ti.Tk()
screen_width = round(main_menu.winfo_screenwidth()/2)
screen_height = round(main_menu.winfo_screenheight()/2)

main_menu.title(  'Gra w tkinter'  )

main_menu.geometry( str(screen_width) +'x'+ str(screen_height) +'+'+ str(round(screen_width/2)) +'+'+ str(round(screen_height/2 )) )




my_exit = ti.Button( main_menu , text = """
   To finish click here   
""" , background = "red" , command = exit )
my_exit.place(  x = round( screen_width * 0.45 ) , y = round( screen_height * 0.8 )  )

def go():
    """Start new game"""
    root = ti.Tk()

    #if war.get()

    SCREEN_WIDTH = round(root.winfo_screenwidth()*3/5)
    SCREEN_HEIGHT = round(root.winfo_screenheight()*3/5)
    SCREEN_SIZE = (SCREEN_WIDTH,SCREEN_HEIGHT)
    root.title(  'TIC TAC TOE 2'  )
    root.geometry( str(SCREEN_WIDTH) +'x'+ str(SCREEN_HEIGHT) +'+'+ str(round(SCREEN_WIDTH/3)) +'+'+ str(round(SCREEN_HEIGHT/3 )) )


    Playfield=[]
    for i in range(3):
	    Playfield.append([2,2,2])

    PF2=Playfield
    PF2 = [PF2,PF2,PF2]
    Playfield = [PF2,PF2,PF2]
    
    boool = random.choice((0,1))
    out=0
    I_m_here=out

    moves=[]

    def go_to(num):
        if ( num in range(1,10) ) :
            N_1 = (num-1) // 3
            N_2 = (num-1) % 3
            if type(Playfield[N_1][N_2])==list :
                I_m_here = Playfield[N_1][N_2]
                moves.append([num])
            else:
                I_m_here = out


    def go_to_and_change(num):
        if ( num in range(1,10) ) and ( I_m_here != out ) :
            N_1 = (num-1) // 3
            N_2 = (num-1) % 3
            I_m_here[N_1][N_2]=boool
            moves[-1].append([num])
            boool = 1-boool
            #Playfield=Playfield[0:3]
            go_to(num)

    def Is_win(frame):
        if  ( frame[1][1] in (0,1) ) and (   frame[0][1]==frame[1][1]==frame[2][1] or frame[0][0]==frame[1][1]==frame[2][2] or frame[0][2]==frame[1][1]==frame[2][0] or frame[1][0]==frame[1][1]==frame[1][2]   ):
            return True
        if ( frame[0][0] in (0,1) ) and (   frame[0][1]==frame[0][0]==frame[0][2] or frame[0][0]==frame[1][0]==frame[2][0]   ) :
            return True
        if ( frame[2][2] in (0,1) ) and (   frame[2][1]==frame[2][0]==frame[2][2] or frame[0][2]==frame[1][2]==frame[2][2]   ) :
            return True
        else:
            return False
    life_bar_red= ti.Canvas(
    root,
    height=SCREEN_HEIGHT,
    width=round(SCREEN_WIDTH*0.04),
    bg="red")
    life_bar_red.place( x= round(SCREEN_WIDTH*0.96) , y = 0 )

    TTT_width= round(SCREEN_WIDTH*0.9)
    TTT_height= round(SCREEN_HEIGHT*0.9)

    canvas = ti.Canvas(
    root,
    height=TTT_height,
    width=TTT_width,
    bg="white")
    canvas.place( x= SCREEN_WIDTH*0.05 , y = 0 )
    
    life_bar_blue= ti.Canvas(
    root,
    height=SCREEN_HEIGHT,
    width= round(SCREEN_WIDTH*0.04),
    bg="blue")
    life_bar_blue.place( x= 0 , y = 0 )

    my_exit_in = ti.Button( root , text = """     To finish all click here     """ , background = "red" , command = exit )
    my_exit_in.place(  x = round( SCREEN_WIDTH * 0.45 ) , y = round( SCREEN_HEIGHT * 0.95 )  )
    
    
    def draw_grid():
        canvas.create_line( round( TTT_width * 31/94 ) , TTT_height , round( TTT_width * 31/94 ) , 0 , fill = "black" , width=round( TTT_width * 1/47 ) )
        canvas.create_line( round( TTT_width * 63/94 ) , TTT_height , round( TTT_width * 63/94 ) , 0 , fill = "black" , width=round( TTT_width * 1/47 ) )
        canvas.create_line( TTT_width , round( TTT_height * 31/94 ) , 0 , round( TTT_height * 31/94 ) , fill = "black" , width=round( TTT_height * 1/47 ) )
        canvas.create_line( TTT_width , round( TTT_height * 63/94 ) , 0 , round( TTT_height * 63/94 ) , fill = "black" , width=round( TTT_height * 1/47 ) )
        for i in range(3):
            for j in range(3):
                if type(Playfield[i1][j2])!=list : continue
                left_up=( TTT_height*i*16/47 , TTT_width*j*16/47 )
                in_width = TTT_width*15/47
                in_height = TTT_height*15/47
                canvas.create_line( round( left_up[1] + in_width*21/60 ) , round( left_up[0] + in_height*1/15 ) , round( left_up[1] + in_width*21/60 ) , round( left_up[0] + in_height*14/15 ) , fill = "black" , width=round( in_width * 1/30 ) )
                canvas.create_line( round( left_up[1] + in_width*39/60 ) , round( left_up[0] + in_height*1/15 ) , round( left_up[1] + in_width*39/60 ) , round( left_up[0] + in_height*14/15 ) , fill = "black" , width=round( in_width * 1/30 ) )
                canvas.create_line( round( left_up[1] + in_width*1/15 ) , round( left_up[0] + in_height*21/60 ) , round( left_up[1] + in_width*14/15 ) , round( left_up[0] + in_height*21/60 ) , fill = "black" , width=round( in_height * 1/30 ) )
                canvas.create_line( round( left_up[1] + in_width*1/15 ) , round( left_up[0] + in_height*39/60 ) , round( left_up[1] + in_width*14/15 ) , round( left_up[0] + in_height*39/60 ) , fill = "black" , width=round( in_height * 1/30 ) )
    draw_grid()
    def draw_symbols():
        for i1 in range(3):
            for j1 in range(3):
                left_up=( TTT_height*(2-i1)*16/47 , TTT_width*(2-j1)*16/47 )
                in_width = TTT_width*15/47
                in_height = TTT_height*15/47
                if type(Playfield[i1][j2])==list :
                    for i2 in range(3):
                        for j2 in range(3):
                            left_up_blocks = ( left_up[0]+in_height*(2+(2-i2)*9)/30 , left_up[1]+in_width*(2+(2-j2)*9)/30 )
                            width_block = in_width*4/15
                            height_block = in_height*4/15
                            if Playfield[i1][j1][i2][j2]==1 :
                                line_width_in_block = max( round(width_block) , round(height_block) )/10
                                canvas.create_line( round( left_up_blocks[1] + width_block*2/15 ) , round( left_up_blocks[0] + height_block*2/15 ) , round( left_up_blocks[1] + width_block*13/15 ) , round( left_up_blocks[0] + height_block*13/15 ) , fill = "black" , width=line_width_in_block )
                                canvas.create_line( round( left_up_blocks[1] + width_block*2/15 ) , round( left_up_blocks[0] + height_block*13/15 ) , round( left_up_blocks[1] + width_block*13/15 ) , round( left_up_blocks[0] + height_block*2/15 ) , fill = "black" , width=line_width_in_block )
                            if Playfield[i1][j1][i2][j2]==0:
                                R_in=min( round(in_width) , round(in_height) )*4/9
                                canvas.create_oval( R_in , R_in , round( left_up_blocks[1] + width_block/2 ) , round( left_up_blocks[0] + height_block/2 ) )
                else :
                    line_width = max( round(in_width) , round(in_height) )/15
                    if Playfield[i1][j1]==1:
                        canvas.create_line( round( left_up[1] + in_width*2/15 ) , round( left_up[0] + in_height*2/15 ) , round( left_up[1] + in_width*13/15 ) , round( left_up[0] + in_height*13/15 ) , fill = "black" , width=line_width )
                        canvas.create_line( round( left_up[1] + in_width*2/15 ) , round( left_up[0] + in_height*13/15 ) , round( left_up[1] + in_width*13/15 ) , round( left_up[0] + in_height*2/15 ) , fill = "black" , width=line_width )
                    else:
                        R=min( round(in_width) , round(in_height) )*2/5
                        canvas.create_oval( R , R , round( left_up[1] + in_width/2 ) , round( left_up[0] + in_height/2 ) )

    draw_symbols()

























    root.mainloop()
start = ti.Button( main_menu , text = """
      Start new game      
""" , background = "blue" , command = go , fg="white")
start.place(  x = round( screen_width * 0.45 ) , y = round( screen_height * 0.05 )  )

def watch_authors():
    pass
Autorzy = ti.Button( main_menu , text = """
            Authors            
""" , background = "green" , command = watch_authors , fg="black")
Autorzy.place(  x = round( screen_width * 0.45 ) , y = round( screen_height * 0.4 )  )

    
def watch_ruls():
    pass
ruls = ti.Button( main_menu , text = """
               Rules               
""" , background = "purple" , command = watch_ruls , fg="white")
ruls.place(  x = round( screen_width * 0.45 ) , y = round( screen_height * 0.6 )  )

war = ti.IntVar()
war_mod = ti.Checkbutton(main_menu, text = " WAR mod ", variable = war , \
    onvalue = 1, offvalue = 0, height=5, width = 20)
war_mod.place( x = screen_width * 0.43 , y = screen_height * 0.2 )


main_menu.mainloop()
